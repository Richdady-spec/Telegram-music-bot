from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

TOKEN ="8064040089:AAFbR4od99_iO7mW6afW3jVrhOKMv1xrej8" # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –æ—Ç BotFather

REACTIONS = ["‚ù§Ô∏è‚Äçüî•", "üî•", "ü´¶", "üå™"]
music_storage = {}  # chat_id -> list of (file_id, reactions)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ –¥—Ä—É–≥–∏–µ —Å–º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏!")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    audio = update.message.audio or update.message.voice
    if not audio:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    file_id = audio.file_id
    chat_id = update.message.chat_id
    if chat_id not in music_storage:
        music_storage[chat_id] = []
    music_storage[chat_id].append((file_id, [0] * len(REACTIONS)))

    keyboard = [
        [InlineKeyboardButton(r, callback_data=f"{chat_id}:{file_id}:{i}")]
        for i, r in enumerate(REACTIONS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_audio(file_id, reply_markup=reply_markup)

async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # format: chat_id:file_id:index
    chat_id, file_id, index = data.split(":")
    index = int(index)

    for i, (fid, counts) in enumerate(music_storage.get(int(chat_id), [])):
        if fid == file_id:
            counts[index] += 1
            break

    new_text = " ".join(f"{r} {c}" for r, c in zip(REACTIONS, counts))
    await query.edit_message_caption(caption=new_text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, handle_audio))
    app.add_handler(CallbackQueryHandler(reaction_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
